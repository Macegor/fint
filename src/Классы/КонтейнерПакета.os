//// BSLLS:NumberOfOptionalParams-off
// BSLLS:NumberOfParams-off
#Использовать decorator

Перем Путь;
Перем Контекст;
Перем Объекты;
Перем ОбъектыПоТипу;
Перем ОписаниеТочкиВхода;
Перем ОбъектыОдиночки;
Перем ДанныеГенерируемыхФункцийСвойств;
Перем ДанныеПодготовленныхДекораторов;
Перем ДанныеМетодовДляПерехватчиков;

Процедура ПриСозданииОбъекта(КонтекстПриложения, ОписанияСкриптов, ПутьВКонтексте)
	
	ЗаменитьКонфликтующиеСимволы(ПутьВКонтексте);
	Путь = ПутьВКонтексте;
	Контекст = КонтекстПриложения;
	Объекты = Новый Соответствие();
	ОбъектыПоТипу = Новый Соответствие();
	
	Для Каждого Элемент Из ОписанияСкриптов Цикл
		
		ИмяТипа = СтрЗаменить(Путь, ".", "_") + "_" + Элемент.Имя;
		ЗаменитьКонфликтующиеСимволы(ИмяТипа);
		
		Попытка
			ПодключитьСценарий(Элемент.ПолныйПуть, ИмяТипа);
		Исключение
			ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		КонецПопытки;
		
		Элемент.Вставить("Тип", Тип(ИмяТипа));
		Объекты.Вставить(Элемент.Имя, Новый ОписаниеОбъекта(Элемент, ЭтотОбъект));
		
	КонецЦикла;
	
КонецПроцедуры

Функция Объекты() Экспорт
	Возврат Новый ФиксированноеСоответствие(Объекты);
КонецФункции

Функция Контекст() Экспорт
	Возврат Контекст;
КонецФункции

Функция ОписаниеТочкиВхода() Экспорт
	Возврат ОписаниеТочкиВхода;
КонецФункции

Функция Путь() Экспорт
	Возврат Путь;
КонецФункции

Функция ОбъектыПоТипу() Экспорт
	Возврат ОбъектыПоТипу;
КонецФункции

Процедура ПодготовитьОбъекты(РежимОтладки = Ложь) Экспорт
	
	ЗначенияТиповАвтоподстановки = Новый Соответствие();
	ЗначенияТиповАвтоподстановки.Вставить("Строка", "");
	ЗначенияТиповАвтоподстановки.Вставить("Число", 0);
	ЗначенияТиповАвтоподстановки.Вставить("Булево", Ложь);
	ЗначенияТиповАвтоподстановки.Вставить("Дата", Дата(1, 1, 1));
	ЗначенияТиповАвтоподстановки.Вставить("Массив", Новый Массив());
	ЗначенияТиповАвтоподстановки.Вставить("Структура", Новый Структура());
	ЗначенияТиповАвтоподстановки.Вставить("Соответствие", Новый Соответствие());
	ЗначенияТиповАвтоподстановки.Вставить("СписокЗначений", Новый СписокЗначений());
	ЗначенияТиповАвтоподстановки.Вставить("Любой", Неопределено);

	Для Каждого ДанныеОбъекта Из Объекты Цикл
		
		ОписаниеОбъекта = ДанныеОбъекта.Значение;
		ТипОбъектаСтрокой = Строка(ОписаниеОбъекта.ТипОбъекта());
		ПутьКОбъекту = СтрЗаменить(ТипОбъектаСтрокой, "_", ".");
		Объект = Новый(ТипОбъектаСтрокой);
		ДанныеМетодов = ОписаниеОбъекта.ДанныеМетодов();
		Декоратор = Новый ПостроительДекоратора(ОписаниеОбъекта.ТипОбъекта());
		ЛокальныйДекоратор = Новый ПостроительДекоратора(ОписаниеОбъекта.ТипОбъекта());
		ИменаПроизвольныхСвойств = Новый Массив();
		ИменаНаследуемыхСвойств = Новый Массив();
		ЭтоТочкаВхода = Ложь;
		
		Если НЕ Рефлексия.СвойствоСуществует(Объект, "Этот") Тогда
			ВызватьИсключение СтрШаблон("У объекта %1 не объявлено свойство ""Этот""", ПутьКОбъекту);
		КонецЕсли;
		
		Рефлексия.УстановитьСвойство(ОписаниеОбъекта, "ЭталонныйОбъект", Объект);
		
		Свойства = Рефлексия.ПолучитьТаблицуСвойств(Объект);
		Методы = Рефлексия.ПолучитьТаблицуМетодов(Объект);
		ПоследняяАннотацияИмпорта = Неопределено;
		НаследуетсяОт = Неопределено;
		ЭтоИнтерфейс = Ложь;
		
		Для Каждого Свойство Из Свойства Цикл
			
			АннотацииСвойства = Рефлексия.ТаблицаАннотацийВСтруктуру(Свойство.Аннотации);
			
			Если Свойство.Имя = "Базовый" Тогда
				Продолжить;
			КонецЕсли;
			
			Если Свойство.Имя = "Этот" Тогда
				
				Если АннотацииСвойства.Свойство("ТочкаВхода") И ОписаниеТочкиВхода = Неопределено Тогда
					ОписаниеТочкиВхода = ОписаниеОбъекта;
					ЭтоТочкаВхода = Истина;
				КонецЕсли;
				
				Если АннотацииСвойства.Свойство("Наследует") Тогда
					
					Если ТипЗнч(АннотацииСвойства.Наследует) <> Тип("Строка") Тогда
						ВызватьИсключение СтрШаблон("Указана аннотация наследования но не указан тип. Объект: %1", ПутьКОбъекту);
					КонецЕсли;
					
					Если НЕ ТипСуществуетИлиИмпортирован(Объект, АннотацииСвойства.Наследует) Тогда
						ВызватьИсключение СтрШаблон("Имя ""%1"" наследуемого типа не зарегистрировано или тип не импортирован. Объект: %2",
							АннотацииСвойства.Наследует, ПутьКОбъекту);
					КонецЕсли;
					
					НаследуетсяОт = Рефлексия.ПолучитьСвойство(Объект, АннотацииСвойства.Наследует);
					Рефлексия.УстановитьСвойство(ОписаниеОбъекта, "ОписаниеБазовогоКласса", НаследуетсяОт);
					
				КонецЕсли;
				
				Если АннотацииСвойства.Свойство("Интерфейс") Тогда
					ЭтоИнтерфейс = Истина;
					Рефлексия.УстановитьСвойство(ОписаниеОбъекта, "ЭтоИнтерфейс", Истина);
				КонецЕсли;
				
				Продолжить;
				
			КонецЕсли;
			
			Если ПоследняяАннотацияИмпорта <> Неопределено И НЕ АннотацииСвойства.Количество() Тогда
				
				Если ПоследняяАннотацияИмпорта = "ТекущийКонтекст" Тогда
					ОписаниеОбъектаИмпорта = ОписаниеОбъекта(Свойство.Имя);
				Иначе
					ОписаниеОбъектаИмпорта = Контекст.ОписаниеОбъекта(Свойство.Имя, ПоследняяАннотацияИмпорта, ЭтотОбъект);
				КонецЕсли;
				
				Рефлексия.УстановитьСвойство(Объект, Свойство.Имя, ОписаниеОбъектаИмпорта);
				Продолжить;
				
			КонецЕсли;
			
			Если НЕ АннотацииСвойства.Количество() Тогда
				ВызватьИсключение СтрШаблон("У свойства ""%1"" не указана аннотация типа или иная. Объект: %2", Свойство.Имя, ПутьКОбъекту);
			КонецЕсли;
			
			Если АннотацииСвойства.Свойство("Импорт") Тогда
				
				ПоследняяАннотацияИмпорта = ?(ТипЗнч(АннотацииСвойства.Импорт) = Тип("Структура"), "ТекущийКонтекст", АннотацииСвойства.Импорт);
				
				Если ПоследняяАннотацияИмпорта = "ТекущийКонтекст" Тогда
					ОписаниеОбъектаИмпорта = ОписаниеОбъекта(Свойство.Имя);
				Иначе
					ОписаниеОбъектаИмпорта = Контекст.ОписаниеОбъекта(Свойство.Имя, ПоследняяАннотацияИмпорта, ЭтотОбъект);
				КонецЕсли;
				
				Рефлексия.УстановитьСвойство(Объект, Свойство.Имя, ОписаниеОбъектаИмпорта);
				Продолжить;
				
			Иначе
				ПоследняяАннотацияИмпорта = Неопределено;
			КонецЕсли;
			
			АннотацияТипа = АннотацияТипаИзАннотаций(АннотацииСвойства);
			ИмяСвойстваТипа = АннотацияТипа.Ключ;
			
			Если ИмяСвойстваТипа <> "Любой" И НЕ ТипСуществуетИлиИмпортирован(Объект, ИмяСвойстваТипа) Тогда
				ВызватьИсключение СтрШаблон("Имя типа ""%1"" свойства ""%2"" не зарегистрировано или тип не импортирован. Объект: %3",
					ИмяСвойстваТипа, Свойство.Имя, ПутьКОбъекту);
			КонецЕсли;
			
			Попытка
				УстановитьЗначениеПоУмолчанию = ТипЗнч(Рефлексия.ПолучитьСвойство(Объект, ИмяСвойстваТипа)) <> Тип("ОписаниеОбъекта");
			Исключение
				УстановитьЗначениеПоУмолчанию = Истина;
			КонецПопытки;
			
			Если УстановитьЗначениеПоУмолчанию Тогда
				Рефлексия.УстановитьСвойство(Объект, Свойство.Имя, ЗначенияТиповАвтоподстановки[ИмяСвойстваТипа]);
			КонецЕсли;
			
			ИменаПроизвольныхСвойств.Добавить(Свойство.Имя);
			
			НайденныеСтроки = Методы.НайтиСтроки(Новый Структура("Имя", Свойство.Имя));
			
			Если НайденныеСтроки.Количество() Тогда
				
				Если НЕ НайденныеСтроки[0].ЭтоФункция Тогда
					ВызватьИсключение СтрШаблон("Метод работы с свойством %1 определен, но он не является функцией. Объект: %2",
						Свойство.Имя, ПутьКОбъекту);
				КонецЕсли;
				
				АннотацииМетода = Рефлексия.ТаблицаАннотацийВСтруктуру(НайденныеСтроки[0].Аннотации);
				АннотацияТипаМетода = АннотацияТипаИзАннотаций(АннотацииМетода);
				
				Если АннотацияТипаМетода = Неопределено Тогда
					ВызватьИсключение СтрШаблон("Метод работы с свойством %1 определен, но не указан тип возвращаемого значения. Объект: %2",
						Свойство.Имя, ПутьКОбъекту);
				КонецЕсли;
				
				Если АннотацияТипаМетода.Ключ <> АннотацияТипа.Ключ Тогда
					ВызватьИсключение СтрШаблон("Метод работы с свойством %1 определен, но тип возвращаемого значения не соответствует типу свойства. Объект: %2",
						Свойство.Имя, ПутьКОбъекту);
				КонецЕсли;
				
				Если НайденныеСтроки[0].Параметры.Количество() <> 1 Тогда
					ВызватьИсключение СтрШаблон("Метод работы с свойством %1 определен, но не имеет нужное количество параметров, ожидается 1. Объект: %2",
						Свойство.Имя, ПутьКОбъекту);
				ИначеЕсли НайденныеСтроки[0].Параметры[0].Имя <> "Значение" Тогда
					ВызватьИсключение СтрШаблон("Метод работы с свойством %1 определен, но имя параметра задано не верно, требуется ""Значение"". Объект: %2",
						Свойство.Имя, ПутьКОбъекту);
				ИначеЕсли НЕ НайденныеСтроки[0].Параметры[0].Аннотации.Количество() Тогда
					ВызватьИсключение СтрШаблон("Метод работы с свойством %1 определен, параметр назван верно, но не указан тип параметра. Объект: %2",
						Свойство.Имя, ПутьКОбъекту);
				Иначе
					
					АннотацииПараметра = Рефлексия.ТаблицаАннотацийВСтруктуру(НайденныеСтроки[0].Параметры[0].Аннотации);
					АннотацияТипаПараметра = АннотацияТипаИзАннотаций(АннотацииПараметра);
					
					Если АннотацияТипаПараметра.Ключ <> АннотацияТипа.Ключ Тогда
						ВызватьИсключение СтрШаблон("Метод работы с свойством %1 определен, но тип параметра не соответствует типу свойства. Объект: %2",
							Свойство.Имя, ПутьКОбъекту);
					КонецЕсли;
					
				КонецЕсли;
				
			Иначе
				
				СтрокаДанных = ДанныеГенерируемыхФункцийСвойств.Добавить();
				СтрокаДанных.Свойство = Свойство;
				СтрокаДанных.АннотацииСвойства = АннотацииСвойства;
				СтрокаДанных.АннотацияТипа = АннотацияТипа;
				СтрокаДанных.Объект = Объект;
				СтрокаДанных.Декоратор = Декоратор;
				СтрокаДанных.ЛокальныйДекоратор = ЛокальныйДекоратор;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Рефлексия.УстановитьСвойство(ОписаниеОбъекта, "ИменаПроизвольныхСвойств", ИменаПроизвольныхСвойств);
		
		СтрокиМетодаКонструктора = Методы.НайтиСтроки(Новый Структура("Имя", "Конструктор"));
		
		Если СтрокиМетодаКонструктора.Количество() Тогда
			
			Метод = СтрокиМетодаКонструктора[0];
			
			Если НЕ Метод.Экспорт Тогда
				ВызватьИсключение СтрШаблон("Метод конструктора должен быть экспортным. Объект: %1", ПутьКОбъекту);
			КонецЕсли;
			
			АннотацииМетода = Рефлексия.ТаблицаАннотацийВСтруктуру(Метод.Аннотации);
			
			Рефлексия.УстановитьСвойство(ОписаниеОбъекта, "ЕстьКонструктор", Истина);
			Рефлексия.УстановитьСвойство(ОписаниеОбъекта, "КоличествоПараметровКонструктора", Метод.Параметры.Количество());
			
		КонецЕсли;
		
		Если ЭтоТочкаВхода И НЕ ОписаниеОбъекта.ЕстьКонструктор() Тогда
			ВызватьИсключение "В объекте точки входа обязательно должен быть конструктор с одним параметром";
		КонецЕсли;
		
		Если ЭтоТочкаВхода И НЕ ОписаниеОбъекта.КоличествоПараметровКонструктора() = 1 Тогда
			ВызватьИсключение "В конструкторе объекта точки входа обязательно должен быть один параметр";
		КонецЕсли;
		
		Если НЕ НаследуетсяОт = Неопределено Тогда
			
			Если НЕ Рефлексия.СвойствоСуществует(Объект, "Базовый") Тогда
				ВызватьИсключение СтрШаблон("У объекта %1 не объявлено свойство ""Базовый""", ПутьКОбъекту);
			КонецЕсли;
			
			ОбъектНаследуемого = Новый(НаследуетсяОт.ТипОбъекта());
			МетодыНаследуемого = Рефлексия.ПолучитьТаблицуМетодов(ОбъектНаследуемого);
			СвойстваНаследуемого = Рефлексия.ПолучитьТаблицуСвойств(ОбъектНаследуемого);
			
			Для Каждого СвойствоНаследуемого Из СвойстваНаследуемого Цикл
				
				АннотацииСвойства = Рефлексия.ТаблицаАннотацийВСтруктуру(СвойствоНаследуемого.Аннотации);
				АннотацияТипа = АннотацияТипаИзАннотаций(АннотацииСвойства);
				
				Если НЕ АннотацииСвойства.Количество() Тогда
					Продолжить;
				КонецЕсли;
				
				Если АннотацииСвойства.Свойство("Импорт") Тогда
					Продолжить;
				КонецЕсли;
				
				ИмяСвойства = СвойствоНаследуемого.Имя;
				
				Если НЕ Рефлексия.СвойствоСуществует(Объект, ИмяСвойства) Тогда
					Поле = Новый Поле(ИмяСвойства);
					Декоратор.Поле(Поле);
					ЛокальныйДекоратор.Поле(Поле);
				КонецЕсли;
				
				ИменаНаследуемыхСвойств.Добавить(ИмяСвойства);
				
				СтрокаДанных = ДанныеГенерируемыхФункцийСвойств.Добавить();
				СтрокаДанных.Свойство = СвойствоНаследуемого;
				СтрокаДанных.АннотацииСвойства = АннотацииСвойства;
				СтрокаДанных.АннотацияТипа = АннотацияТипа;
				СтрокаДанных.Объект = Объект;
				СтрокаДанных.Декоратор = Декоратор;
				СтрокаДанных.ЛокальныйДекоратор = ЛокальныйДекоратор;
				
			КонецЦикла;
			
			Для Каждого МетодНаследуемого Из МетодыНаследуемого Цикл
				
				Если НЕ МетодНаследуемого.Экспорт Тогда
					Продолжить;
				КонецЕсли;
				
				НайденныеСтроки = Методы.НайтиСтроки(Новый Структура("Имя", МетодНаследуемого.Имя));
				
				Если НайденныеСтроки.Количество() Тогда
					Продолжить;
				КонецЕсли;
				
				НовыйМетод = Новый Метод(МетодНаследуемого.Имя).Публичный();
				ПеречислениеПараметров = "";
				
				Для Каждого Параметр Из МетодНаследуемого.Параметры Цикл
					
					НовыйПараметрМетода = Новый ПараметрМетода(Параметр.Имя);
					ПеречислениеПараметров = ПеречислениеПараметров + ?(ПеречислениеПараметров = "", "", ", ") + Параметр.Имя;
					
					НовыйМетод.Параметр(НовыйПараметрМетода);
					
				КонецЦикла;
				
				Если НЕ МетодНаследуемого.ЭтоФункция Тогда
					НовыйМетод.ЭтоПроцедура();
				КонецЕсли;
				
				ШаблонТелаМетода = ?(МетодНаследуемого.ЭтоФункция, "	Возврат ", "") + "ФИНТ_БазовыйКласс.%1(%2);";
				НовыйМетод.ТелоМетода(СтрШаблон(ШаблонТелаМетода, МетодНаследуемого.Имя, ПеречислениеПараметров));
				ЛокальныйДекоратор.Метод(НовыйМетод);
				Декоратор.Метод(НовыйМетод);
				
				СтрокаДанных = ДанныеМетодовДляПерехватчиков.Добавить();
				СтрокаДанных.Метод = МетодНаследуемого;
				СтрокаДанных.Объект = Объект;
				СтрокаДанных.Декоратор = Декоратор;
				СтрокаДанных.ЛокальныйДекоратор = ЛокальныйДекоратор;
				СтрокаДанных.Генерируемый = Ложь;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Рефлексия.УстановитьСвойство(ОписаниеОбъекта, "ИменаНаследуемыхСвойств", ИменаНаследуемыхСвойств);
		
		Для Каждого Метод Из Методы Цикл
			
			Если Метод.Имя = "ВызватьСобытие" ИЛИ Метод.Имя = "ПриСозданииОбъекта" Тогда
				Продолжить;
			КонецЕсли;
			
			АннотацииМетода = Рефлексия.ТаблицаАннотацийВСтруктуру(Метод.Аннотации);
			
			Если Метод.ЭтоФункция Тогда
				
				Если НЕ АннотацииМетода.Количество() Тогда
					ВызватьИсключение СтрШаблон("У функции ""%1"" объекта отсутствует указание типа возвращаемого значения. Объект: %2",
						Метод.Имя, ПутьКОбъекту);
				КонецЕсли;
				
				АннотацияТипа = АннотацияТипаИзАннотаций(АннотацииМетода);
				ИмяСвойстваТипа = АннотацияТипа.Ключ;
				
				Если ИмяСвойстваТипа <> "Любой" И НЕ ТипСуществуетИлиИмпортирован(Объект, ИмяСвойстваТипа) Тогда
					ВызватьИсключение СтрШаблон("Имя типа ""%1"" возвращаемого значения функции ""%2"" не зарегистрировано или тип не импортирован. Объект: %3",
						ИмяСвойстваТипа, Метод.Имя, ПутьКОбъекту);
				КонецЕсли;
				
			КонецЕсли;
			
			ДанныеМетода = ДанныеМетодов[Метод.Имя];
			ГенерируетсяНовый = Ложь;
			
			Если НЕ ДанныеМетода.Экспортный Тогда
				НовыйМетод = Новый Метод(Метод.Имя)
					.Публичный()
					.ТелоМетода(ДанныеМетода.Текст);
				ГенерируетсяНовый = Истина;
			КонецЕсли;
			
			Если ЭтоИнтерфейс Тогда
				
				Если НЕ ДанныеМетода.Экспортный Тогда
					ВызватьИсключение СтрШаблон("Метод интерфейса ""%1"" должен быть экспортным. Объект: %2", Метод.Имя, ПутьКОбъекту);
				КонецЕсли;
				
				Если СокрЛП(ДанныеМетода.Текст) <> "" Тогда
					ВызватьИсключение СтрШаблон("Метод интерфейса ""%1"" не долже содержать реализацию. Объект: %2", Метод.Имя, ПутьКОбъекту);
				КонецЕсли;
				
				СтрокаДанныхМетода = ОписаниеОбъекта.ДанныеМетодовИнтерфейса().Добавить();
				СтрокаДанныхМетода.Имя = Метод.Имя;
				СтрокаДанныхМетода.ЭтоФункция = Метод.ЭтоФункция;
				СтрокаДанныхМетода.Параметры = Метод.Параметры.Скопировать();
				СтрокаДанныхМетода.Аннотации = Метод.Аннотации.Скопировать();
				СтрокаДанныхМетода.Экспорт = ДанныеМетода.Экспортный;
				СтрокаДанныхМетода.КоличествоПараметров = СтрокаДанныхМетода.Параметры.Количество();
				
			КонецЕсли;
			
			Для Каждого Параметр Из Метод.Параметры Цикл
				
				АннотацииПараметра = Рефлексия.ТаблицаАннотацийВСтруктуру(Параметр.Аннотации);
				
				Если НЕ АннотацииПараметра.Количество() Тогда
					ВызватьИсключение СтрШаблон("У параметра ""%1"" метода ""%2"" не указана аннотация типа или иная. Объект: %3",
						Параметр.Имя, Метод.Имя, ПутьКОбъекту);
				КонецЕсли;
				
				АннотацияТипа = АннотацияТипаИзАннотаций(АннотацииПараметра);
				ИмяСвойстваТипа = АннотацияТипа.Ключ;
				
				Если ИмяСвойстваТипа <> "Любой" И НЕ ТипСуществуетИлиИмпортирован(Объект, ИмяСвойстваТипа) Тогда
					ВызватьИсключение СтрШаблон("Имя типа ""%1"" параметра ""%4"" метода ""%2"" не зарегистрировано или тип не импортирован. Объект: %3",
						ИмяСвойстваТипа, Метод.Имя, ПутьКОбъекту, Параметр.Имя);
				КонецЕсли;
				
				Если ГенерируетсяНовый Тогда
					
					НовыйПараметрМетода = Новый ПараметрМетода(Параметр.Имя);
					
					Для Каждого АннотацияПараметра Из Параметр.Аннотации Цикл
						
						НоваяАннотация = Новый Аннотация(АннотацияПараметра.Имя);
						
						Для Каждого ПараметрАннотации Из АннотацияПараметра.Параметры Цикл
							НоваяАннотация.Параметр(ПараметрАннотации.Имя, ПараметрАннотации.Значение);
						КонецЦикла;
						
						НовыйПараметрМетода.Аннотация(НоваяАннотация);
						
					КонецЦикла;
					
					Если ДанныеМетода.ЭтоПроцедура Тогда
						НовыйМетод.ЭтоПроцедура();
					КонецЕсли;
					
					НовыйМетод.Параметр(НовыйПараметрМетода);
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если ГенерируетсяНовый Тогда
				ЛокальныйДекоратор.Метод(НовыйМетод);
			КонецЕсли;
			
			СтрокаДанных = ДанныеМетодовДляПерехватчиков.Добавить();
			СтрокаДанных.Метод = Метод;
			СтрокаДанных.Объект = Объект;
			СтрокаДанных.Декоратор = Декоратор;
			СтрокаДанных.ЛокальныйДекоратор = ЛокальныйДекоратор;
			СтрокаДанных.Генерируемый = Ложь;
			
		КонецЦикла;
		
		Поле = Новый Поле("ФИНТ_ВнешнийОбъект");
		Декоратор.Поле(Поле);
		ЛокальныйДекоратор.Поле(Поле);
		
		Поле = Новый Поле("ФИНТ_НаследуемыйКласс");
		Декоратор.Поле(Поле);
		ЛокальныйДекоратор.Поле(Поле);
		
		Поле = Новый Поле("ФИНТ_БазовыйКласс");
		Декоратор.Поле(Поле);
		ЛокальныйДекоратор.Поле(Поле);
		
		Поле = Новый Поле("ФИНТ_Контейнер").ЗначениеПоУмолчанию(ЭтотОбъект);
		Декоратор.Поле(Поле);
		ЛокальныйДекоратор.Поле(Поле);
		
		Поле = Новый Поле("ФИНТ_ОписаниеОбъекта").ЗначениеПоУмолчанию(ОписаниеОбъекта);
		Декоратор.Поле(Поле);
		ЛокальныйДекоратор.Поле(Поле);
		
		ИмяТипаЛокальногоДекоратора = ТипОбъектаСтрокой + "_Локально";
		ИмяТипаЭкспортногоДекоратора = ТипОбъектаСтрокой + "_Экспорт";
		
		Если РежимОтладки Тогда
			Декоратор.Отладка();
			ЛокальныйДекоратор.Отладка();
		КонецЕсли;
		
		СтрокаПодготовленногоДекоратора = ДанныеПодготовленныхДекораторов.Добавить();
		СтрокаПодготовленногоДекоратора.Объект = Объект;
		СтрокаПодготовленногоДекоратора.ОписаниеОбъекта = ОписаниеОбъекта;
		СтрокаПодготовленногоДекоратора.ИмяТипаЛокальногоДекоратора = ИмяТипаЛокальногоДекоратора;
		СтрокаПодготовленногоДекоратора.ИмяТипаЭкспортногоДекоратора = ИмяТипаЭкспортногоДекоратора;
		СтрокаПодготовленногоДекоратора.Декоратор = Декоратор;
		СтрокаПодготовленногоДекоратора.ЛокальныйДекоратор = ЛокальныйДекоратор;
		
		Рефлексия.УстановитьСвойство(ОписаниеОбъекта, "ИмяТипаЛокальногоОбъекта", ИмяТипаЛокальногоДекоратора);
		Рефлексия.УстановитьСвойство(ОписаниеОбъекта, "ИмяТипаЭкспортногоОбъекта", ИмяТипаЭкспортногоДекоратора);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СобратьИЗарегистрироватьОбъекты() Экспорт
	
	Для Каждого Элемент Из ДанныеГенерируемыхФункцийСвойств Цикл
		СгенерироватьМетодыСвойства(Элемент.Свойство, Элемент.АннотацииСвойства, Элемент.АннотацияТипа,
			Элемент.Объект, Элемент.Декоратор, Элемент.ЛокальныйДекоратор);
	КонецЦикла;
	
	Для Каждого Элемент Из ДанныеПодготовленныхДекораторов Цикл
		
		ОписаниеОбъекта = Элемент.ОписаниеОбъекта;
		
		Если НЕ ОписаниеОбъекта.ЭтоИнтерфейс() Тогда
			Продолжить;
		КонецЕсли;
		
		МетодыИнтерфейса = ОписаниеОбъекта.ДанныеМетодовИнтерфейса();
		ОписанияДочернихКлассов = ОписаниеОбъекта.ОписанияДочернихКлассов();
		
		Для Каждого ОписаниеДочернегоКласса Из ОписанияДочернихКлассов Цикл
			
			ЭталонныйОбъект = ОписаниеДочернегоКласса.ЭталонныйОбъект();
			МетодыДочернего = Рефлексия.ПолучитьТаблицуМетодов(ЭталонныйОбъект);
			
			Для Каждого МетодИнтерфейса Из МетодыИнтерфейса Цикл
				
				НайденныеСтроки = МетодыДочернего.НайтиСтроки(Новый Структура("Имя", МетодИнтерфейса.Имя));
				
				Если НЕ НайденныеСтроки.Количество() Тогда
					ВызватьИсключение СтрШаблон("Метод ""%1"" не реализован согласно контракту. Объект %2.%3", МетодИнтерфейса.Имя, ОписаниеОбъекта.Контейнер().Путь(), ОписаниеОбъекта.Имя());
				КонецЕсли;
				
				ТаблицаИсходногоМетода = МетодыИнтерфейса.СкопироватьКолонки();
				ЗаполнитьЗначенияСвойств(ТаблицаИсходногоМетода.Добавить(), МетодИнтерфейса);
				
				ТаблицаПроверяемогоМетода = МетодыИнтерфейса.СкопироватьКолонки();
				ЗаполнитьЗначенияСвойств(ТаблицаПроверяемогоМетода.Добавить(), НайденныеСтроки[0]);
				
				Если НЕ СравнитьТаблицы(ТаблицаИсходногоМетода, ТаблицаПроверяемогоМетода) Тогда
					ВызватьИсключение СтрШаблон("Метод ""%1"" не соответствует требованиям контракта. Объект %2.%3", МетодИнтерфейса.Имя, ОписаниеОбъекта.Контейнер().Путь(), ОписаниеОбъекта.Имя());
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого Элемент Из ДанныеМетодовДляПерехватчиков Цикл
		ДобавитьПерехватчикиКОбъекту(Элемент.Объект, Элемент.Декоратор, Элемент.ЛокальныйДекоратор, Элемент.Метод, Элемент.Генерируемый);
	КонецЦикла;
	
	Для Каждого Элемент Из ДанныеПодготовленныхДекораторов Цикл
		Попытка
			Элемент.Декоратор.ЗарегистрироватьВСистемеТипов(Элемент.ИмяТипаЭкспортногоДекоратора);
			Элемент.ЛокальныйДекоратор.ЗарегистрироватьВСистемеТипов(Элемент.ИмяТипаЛокальногоДекоратора);
			ОбъектыПоТипу.Вставить(ТипЗнч(Элемент.Объект), Элемент.ОписаниеОбъекта);
			ОбъектыПоТипу.Вставить(Тип(Элемент.ИмяТипаЛокальногоДекоратора), Элемент.ОписаниеОбъекта);
			ОбъектыПоТипу.Вставить(Тип(Элемент.ИмяТипаЭкспортногоДекоратора), Элемент.ОписаниеОбъекта);
		Исключение
			ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьПерехватчикиКОбъекту(Знач Объект, Декоратор, ЛокальныйДекоратор, Метод, ГенерируемыйМетод = Ложь)
	
	Перехватчики = Новый Массив();
	Перехватчики.Добавить(ПерехватчикСинхронизацииСвойствДекораторов(Метод.Имя, ТипыПерехватчиковМетода.Перед));
	Перехватчики.Добавить(ПерехватчикСинхронизацииНаследуемыхСвойств(Метод.Имя, ТипыПерехватчиковМетода.Перед));
	Перехватчики.Добавить(ПерехватчикПроверкиТиповПараметровМетода(Объект, Метод, ГенерируемыйМетод));
	
	Если Метод.ЭтоФункция Тогда
		
		ПерехватчикПроверкиТипаВозвращаемогоЗначения = ПерехватчикПроверкиТипаВозвращаемогоЗначения(Объект, Метод);
		
		Если ПерехватчикПроверкиТипаВозвращаемогоЗначения <> Неопределено Тогда
			Перехватчики.Добавить(ПерехватчикПроверкиТипаВозвращаемогоЗначения);
		КонецЕсли;
		
	КонецЕсли;
	
	Перехватчики.Добавить(ПерехватчикСинхронизацииСвойствДекораторов(Метод.Имя, ТипыПерехватчиковМетода.После));
	Перехватчики.Добавить(ПерехватчикСинхронизацииСвойствДекораторов(Метод.Имя, ТипыПерехватчиковМетода.ПослеВызоваИсключения));
	Перехватчики.Добавить(ПерехватчикСинхронизацииНаследуемыхСвойств(Метод.Имя, ТипыПерехватчиковМетода.После));
	Перехватчики.Добавить(ПерехватчикСинхронизацииНаследуемыхСвойств(Метод.Имя, ТипыПерехватчиковМетода.ПослеВызоваИсключения));
	
	Для Каждого Перехватчик Из Перехватчики Цикл
		Декоратор.Перехватчик(Перехватчик);
		ЛокальныйДекоратор.Перехватчик(Перехватчик);
	КонецЦикла;
	
КонецПроцедуры

Функция ТипОбъекта(Знач ИмяТипа) Экспорт
	
	Возврат ОписаниеОбъекта(ИмяТипа).ТипОбъекта();
	
КонецФункции

Функция СоздатьОбъект(Знач ИмяТипа, Знач ВыполнятьКонструктор = Истина, Парам1 = NULL, Парам2 = NULL, Парам3 = NULL,
		Парам4 = NULL, Парам5 = NULL, Парам6 = NULL, Парам7 = NULL) Экспорт
	
	ИмяСвойстваСходногоОбъекта = "Декоратор_ИсходныйОбъект";
	ИмяСвойстваЭтот = "Этот";
	ИмяСвойстваБазовыйКласс = "ФИНТ_БазовыйКласс";
	ОписаниеОбъекта = ОписаниеОбъекта(ИмяТипа);
	
	СоответствиеПараметров = Новый Соответствие();
	СоответствиеПараметров.Вставить(1, Парам1);
	СоответствиеПараметров.Вставить(2, Парам2);
	СоответствиеПараметров.Вставить(3, Парам3);
	СоответствиеПараметров.Вставить(4, Парам4);
	СоответствиеПараметров.Вставить(5, Парам5);
	СоответствиеПараметров.Вставить(6, Парам6);
	СоответствиеПараметров.Вставить(7, Парам7);
	
	ЭкспортныйОбъект = Новый(Строка(ОписаниеОбъекта.ТипОбъекта()) + "_Экспорт");
	ЛокальныйОбъект = Новый(Строка(ОписаниеОбъекта.ТипОбъекта()) + "_Локально");
	
	Объект = Рефлексия.ПолучитьСвойство(ЭкспортныйОбъект, ИмяСвойстваСходногоОбъекта);
	
	ОсвободитьОбъект(Рефлексия.ПолучитьСвойство(ЛокальныйОбъект, ИмяСвойстваСходногоОбъекта));
	Рефлексия.УстановитьСвойство(ЛокальныйОбъект, ИмяСвойстваСходногоОбъекта, Объект);
	
	ЭталонныйОбъект = ОписаниеОбъекта.ЭталонныйОбъект();
	
	Для Каждого ДанныеСвойства Из Рефлексия.ПолучитьТаблицуСвойств(ЭталонныйОбъект) Цикл
		Рефлексия.УстановитьСвойство(Объект, ДанныеСвойства.Имя, Рефлексия.ПолучитьСвойство(ЭталонныйОбъект, ДанныеСвойства.Имя));
		Рефлексия.УстановитьСвойство(ЭкспортныйОбъект, ДанныеСвойства.Имя, Рефлексия.ПолучитьСвойство(ЭталонныйОбъект, ДанныеСвойства.Имя));
		Рефлексия.УстановитьСвойство(ЛокальныйОбъект, ДанныеСвойства.Имя, Рефлексия.ПолучитьСвойство(ЭталонныйОбъект, ДанныеСвойства.Имя));
	КонецЦикла;
	
	Рефлексия.УстановитьСвойство(ЭкспортныйОбъект, ИмяСвойстваЭтот, ЛокальныйОбъект);
	Рефлексия.УстановитьСвойство(ЛокальныйОбъект, ИмяСвойстваЭтот, ЛокальныйОбъект);
	Рефлексия.УстановитьСвойство(Объект, ИмяСвойстваЭтот, ЛокальныйОбъект);
	Рефлексия.УстановитьСвойство(ЛокальныйОбъект, "ФИНТ_ВнешнийОбъект", ЭкспортныйОбъект);
	Рефлексия.УстановитьСвойство(ЭкспортныйОбъект, "ФИНТ_ВнешнийОбъект", ЭкспортныйОбъект);
	
	ОписаниеБазовогоКласса = ОписаниеОбъекта.ОписаниеБазовогоКласса();
	
	Если ОписаниеБазовогоКласса <> Неопределено Тогда
		
		БазовыйОбъект = ОписаниеБазовогоКласса.Контейнер().СоздатьОбъект(ОписаниеБазовогоКласса.Имя(), Ложь);
		ЭталонныйОбъектНаследуемого = ОписаниеБазовогоКласса.ЭталонныйОбъект();
		ИменаНаследуемыхСвойств = ОписаниеОбъекта.ИменаНаследуемыхСвойств();
		
		Для Каждого ИмяСвойства Из ИменаНаследуемыхСвойств Цикл
			Рефлексия.УстановитьСвойство(ЛокальныйОбъект, ИмяСвойства, Рефлексия.ПолучитьСвойство(ЭталонныйОбъектНаследуемого, ИмяСвойства));
			Рефлексия.УстановитьСвойство(ЭкспортныйОбъект, ИмяСвойства, Рефлексия.ПолучитьСвойство(ЭталонныйОбъектНаследуемого, ИмяСвойства));
		КонецЦикла;
		
		Рефлексия.УстановитьСвойство(ЛокальныйОбъект, ИмяСвойстваБазовыйКласс, БазовыйОбъект);
		Рефлексия.УстановитьСвойство(ЭкспортныйОбъект, ИмяСвойстваБазовыйКласс, БазовыйОбъект);
		Рефлексия.УстановитьСвойство(Объект, "Базовый", БазовыйОбъект);
		Рефлексия.УстановитьСвойство(ЛокальныйОбъект, "Базовый", БазовыйОбъект);
		Рефлексия.УстановитьСвойство(ЭкспортныйОбъект, "Базовый", БазовыйОбъект);
		Рефлексия.УстановитьСвойство(БазовыйОбъект, "ФИНТ_НаследуемыйКласс", ЭкспортныйОбъект);
		Рефлексия.УстановитьСвойство(Рефлексия.ПолучитьСвойство(БазовыйОбъект, "Этот"), "ФИНТ_НаследуемыйКласс", ЭкспортныйОбъект);
		
	КонецЕсли;
	
	Если ВыполнятьКонструктор Тогда
		
		Если ОписаниеОбъекта.ЕстьКонструктор() Тогда
			ОбъектВызоваКонструктора = ЛокальныйОбъект;
			ОписаниеОбъектаВызоваКонструктора = ОписаниеОбъекта;
		ИначеЕсли ОписаниеБазовогоКласса <> Неопределено И ОписаниеБазовогоКласса.ЕстьКонструктор() Тогда
			ОбъектВызоваКонструктора = Рефлексия.ПолучитьСвойство(БазовыйОбъект, "Этот");
			ОписаниеОбъектаВызоваКонструктора = ОписаниеБазовогоКласса;
		Иначе
			ОбъектВызоваКонструктора = Неопределено;
			ОписаниеОбъектаВызоваКонструктора = Неопределено;
		КонецЕсли;
		
		Если ОбъектВызоваКонструктора <> Неопределено Тогда
			
			МассивПараметров = Новый Массив();
			КоличествоПереданныхПараметров = 0;
			
			Индекс = 7;
			
			Пока Индекс <> 0 Цикл
				
				Если СоответствиеПараметров[Индекс] <> NULL Тогда
					Прервать;
				КонецЕсли;
				
				Индекс = Индекс - 1;
				
			КонецЦикла;
			
			КоличествоПереданныхПараметров = Индекс;
			
			Если КоличествоПереданныхПараметров < ОписаниеОбъектаВызоваКонструктора.КоличествоПараметровКонструктора() Тогда
				ВызватьИсключение СтрШаблон("Недостаточно параметров для конструктора. Ожидается: %1, передано: %2",
					ОписаниеОбъектаВызоваКонструктора.КоличествоПараметровКонструктора(), КоличествоПереданныхПараметров);
			КонецЕсли;
			
			Если КоличествоПереданныхПараметров > ОписаниеОбъектаВызоваКонструктора.КоличествоПараметровКонструктора() Тогда
				ВызватьИсключение СтрШаблон("Слишком много параметров для конструктора. Ожидается: %1, передано: %2",
					ОписаниеОбъектаВызоваКонструктора.КоличествоПараметровКонструктора(), КоличествоПереданныхПараметров);
			КонецЕсли;
			
			Для Индекс = 1 По ОписаниеОбъектаВызоваКонструктора.КоличествоПараметровКонструктора() Цикл
				МассивПараметров.Добавить(СоответствиеПараметров[Индекс]);
			КонецЦикла;
			
			Рефлексия.ВызватьМетод(ОбъектВызоваКонструктора, "Конструктор", МассивПараметров);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОсвободитьОбъект(ЭталонныйОбъект);
	ОсвободитьОбъект(ЭталонныйОбъектНаследуемого);
	
	Возврат ЭкспортныйОбъект;
	
КонецФункции

Функция ОписаниеОбъекта(ИмяТипа) Экспорт
	
	НайденныеДанные = Объекты[ИмяТипа];
	
	Если НайденныеДанные = Неопределено Тогда
		ВызватьИсключение СтрШаблон("Тип %2 не найден в пространстве имен %1", Путь, ИмяТипа);
	Иначе
		Возврат НайденныеДанные;
	КонецЕсли;
	
КонецФункции

Функция ПерехватчикПроверкиТиповПараметровМетода(Объект, ДанныеМетода, ГенерируемыйМетод = Ложь)
	
	Если ГенерируемыйМетод Тогда
		АннотацииПараметровМетода = ДанныеМетода.СтруктураПараметров;
	Иначе
		АннотацииПараметровМетода = Рефлексия.АннотацииПараметровМетода(Объект, ДанныеМетода.Имя);
	КонецЕсли;
	
	ТекстМетода = "ПутьКОбъекту = СтрШаблон(""%1.%2"", ФИНТ_Контейнер.Путь(), ФИНТ_ОписаниеОбъекта.Имя());
		|ДанныеПараметров = Новый Структура();";
	ШаблонСтроки = "МассивТипов = Новый Массив();";
	ШаблонСтрокиМассива = "МассивТипов.Добавить(Тип(""%1""));";
	
	Для Каждого Параметр Из АннотацииПараметровМетода Цикл
		
		АннотацииПараметра = Параметр.Значение.Аннотации;
		АннотацияТипа = АннотацияТипаИзАннотаций(АннотацииПараметра);
		
		Если АннотацияТипа.Ключ = "Любой" Тогда
			Продолжить;
		КонецЕсли;
		
		ОписаниеОжидаемогоТипа = Неопределено;
		
		Если Рефлексия.СвойствоСуществует(Объект, АннотацияТипа.Ключ) Тогда
			ОписаниеОжидаемогоТипа = Рефлексия.ПолучитьСвойство(Объект, АннотацияТипа.Ключ);
		КонецЕсли;
		
		ШаблонСтроки = ШаблонСтроки + Символы.ПС + "ДанныеТипов = Новый Массив();";
		
		Если ТипЗнч(ОписаниеОжидаемогоТипа) <> Тип("ОписаниеОбъекта") Тогда
			Если Рефлексия.ТипСуществуетВКонтексте(АннотацияТипа.Ключ) Тогда
				ШаблонСтроки = ШаблонСтроки + Символы.ПС + СтрШаблон(ШаблонСтрокиМассива, АннотацияТипа.Ключ);
				ШаблонСтроки = ШаблонСтроки + Символы.ПС + "ДанныеТипов.Добавить(Новый Структура(""Типы, ОсновнойТип"", МассивТипов, МассивТипов[0]));";
			КонецЕсли;
		Иначе
			
			МассивИменДопустимыхТипов = Новый Массив();
			ШаблонСтроки = ШаблонСтроки + Символы.ПС + СтрШаблон(ШаблонСтрокиМассива, Строка(ОписаниеОжидаемогоТипа.ТипОбъекта()));
			ШаблонСтроки = ШаблонСтроки + Символы.ПС + СтрШаблон(ШаблонСтрокиМассива, ОписаниеОжидаемогоТипа.ИмяТипаЭкспортногоОбъекта());
			ШаблонСтроки = ШаблонСтроки + Символы.ПС + СтрШаблон(ШаблонСтрокиМассива, ОписаниеОжидаемогоТипа.ИмяТипаЛокальногоОбъекта());
			
			ШаблонСтроки = ШаблонСтроки + Символы.ПС + "ДанныеТипов.Добавить(Новый Структура(""Типы, ОсновнойТип"", МассивТипов, МассивТипов[0]));";
			
			ОписанияДочернихКлассов = ОписаниеОжидаемогоТипа.ОписанияДочернихКлассов();
			
			Для Каждого ОписаниеДочернего Из ОписанияДочернихКлассов Цикл
				
				ШаблонСтроки = ШаблонСтроки + Символы.ПС + "МассивТипов = Новый Массив();";
				ШаблонСтроки = ШаблонСтроки + Символы.ПС + СтрШаблон(ШаблонСтрокиМассива, Строка(ОписаниеДочернего.ТипОбъекта()));
				ШаблонСтроки = ШаблонСтроки + Символы.ПС + СтрШаблон(ШаблонСтрокиМассива, ОписаниеДочернего.ИмяТипаЭкспортногоОбъекта());
				ШаблонСтроки = ШаблонСтроки + Символы.ПС + СтрШаблон(ШаблонСтрокиМассива, ОписаниеДочернего.ИмяТипаЛокальногоОбъекта());
				
				ШаблонСтроки = ШаблонСтроки + Символы.ПС + "ДанныеТипов.Добавить(Новый Структура(""Типы, ОсновнойТип"", МассивТипов, МассивТипов[0]));";
				
			КонецЦикла;
			
		КонецЕсли;
		
		ШаблонСтроки = ШаблонСтроки + Символы.ПС + "ДанныеПараметров.Вставить(""%1"", Новый Структура(""ДанныеТипов, Значение, ОписаниеОбъекта"", ДанныеТипов, %1, ФИНТ_Контейнер.Контекст().ОписаниеОбъектаПоТипу(ТипЗнч(%1))));";
		
		ТекстМетода = ТекстМетода + Символы.ПС + СтрШаблон(ШаблонСтроки, Параметр.Ключ); // BSLLS:IncorrectUseOfStrTemplate-off
		
	КонецЦикла;
	
	ТекстМетода = ТекстМетода + Символы.ПС + "ФИНТ_Контейнер.ПроверитьТипыПараметров(ПутьКОбъекту, """ + ДанныеМетода.Имя + """, ДанныеПараметров);";
	
	Перехватчик = Новый Перехватчик(ДанныеМетода.Имя)
		.ТипПерехватчика(ТипыПерехватчиковМетода.Перед)
		.Тело(ТекстМетода);
	
	Возврат Перехватчик;
	
КонецФункции

Функция ПерехватчикПроверкиТипаВозвращаемогоЗначения(Объект, ДанныеМетода)
	
	АннотацииМетода = Рефлексия.ТаблицаАннотацийВСтруктуру(ДанныеМетода.Аннотации);
	АннотацияТипа = АннотацияТипаИзАннотаций(АннотацииМетода);
	
	Если АннотацияТипа.Ключ = "Любой" Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекстМетода = "ПутьКОбъекту = СтрШаблон(""%1.%2"", ФИНТ_Контейнер.Путь(), ФИНТ_ОписаниеОбъекта.Имя());";
	ШаблонСтроки = "МассивТипов = Новый Массив();";
	ШаблонСтрокиМассива = "МассивТипов.Добавить(Тип(""%1""));";
	ОписаниеОжидаемогоТипа = Неопределено;
	
	Если Рефлексия.СвойствоСуществует(Объект, АннотацияТипа.Ключ) Тогда
		ОписаниеОжидаемогоТипа = Рефлексия.ПолучитьСвойство(Объект, АннотацияТипа.Ключ);
	КонецЕсли;
	
	ШаблонСтроки = ШаблонСтроки + Символы.ПС + "ДанныеТипов = Новый Массив();";
	
	Если ТипЗнч(ОписаниеОжидаемогоТипа) <> Тип("ОписаниеОбъекта") Тогда
		Если Рефлексия.ТипСуществуетВКонтексте(АннотацияТипа.Ключ) Тогда
			ШаблонСтроки = ШаблонСтроки + Символы.ПС + СтрШаблон(ШаблонСтрокиМассива, АннотацияТипа.Ключ);
			ШаблонСтроки = ШаблонСтроки + Символы.ПС + "ДанныеТипов.Добавить(Новый Структура(""Типы, ОсновнойТип"", МассивТипов, МассивТипов[0]));";
		КонецЕсли;
	Иначе
		
		МассивИменДопустимыхТипов = Новый Массив();
		ШаблонСтроки = ШаблонСтроки + Символы.ПС + СтрШаблон(ШаблонСтрокиМассива, Строка(ОписаниеОжидаемогоТипа.ТипОбъекта()));
		ШаблонСтроки = ШаблонСтроки + Символы.ПС + СтрШаблон(ШаблонСтрокиМассива, ОписаниеОжидаемогоТипа.ИмяТипаЭкспортногоОбъекта());
		ШаблонСтроки = ШаблонСтроки + Символы.ПС + СтрШаблон(ШаблонСтрокиМассива, ОписаниеОжидаемогоТипа.ИмяТипаЛокальногоОбъекта());
		
		ШаблонСтроки = ШаблонСтроки + Символы.ПС + "ДанныеТипов.Добавить(Новый Структура(""Типы, ОсновнойТип"", МассивТипов, МассивТипов[0]));";
		
		ОписанияДочернихКлассов = ОписаниеОжидаемогоТипа.ОписанияДочернихКлассов();
		
		Для Каждого ОписаниеДочернего Из ОписанияДочернихКлассов Цикл
			
			ШаблонСтроки = ШаблонСтроки + Символы.ПС + "МассивТипов = Новый Массив();";
			ШаблонСтроки = ШаблонСтроки + Символы.ПС + СтрШаблон(ШаблонСтрокиМассива, Строка(ОписаниеДочернего.ТипОбъекта()));
			ШаблонСтроки = ШаблонСтроки + Символы.ПС + СтрШаблон(ШаблонСтрокиМассива, ОписаниеДочернего.ИмяТипаЭкспортногоОбъекта());
			ШаблонСтроки = ШаблонСтроки + Символы.ПС + СтрШаблон(ШаблонСтрокиМассива, ОписаниеДочернего.ИмяТипаЛокальногоОбъекта());
			
			ШаблонСтроки = ШаблонСтроки + Символы.ПС + "ДанныеТипов.Добавить(Новый Структура(""Типы, ОсновнойТип"", МассивТипов, МассивТипов[0]));";
			
		КонецЦикла;
		
	КонецЕсли;
	
	ТекстМетода = ТекстМетода + Символы.ПС + ШаблонСтроки;
	ТекстМетода = ТекстМетода + Символы.ПС + "ФИНТ_Контейнер.ПроверитьТипВозвращающегоЗначения(ПутьКОбъекту, """ + ДанныеМетода.Имя + """, ДанныеТипов, Декоратор_ВозвращаемоеИзМетодаЗначение, ФИНТ_Контейнер.Контекст().ОписаниеОбъектаПоТипу(ТипЗнч(Декоратор_ВозвращаемоеИзМетодаЗначение)));";
	
	Перехватчик = Новый Перехватчик(ДанныеМетода.Имя)
		.ТипПерехватчика(ТипыПерехватчиковМетода.После)
		.Тело(ТекстМетода);
	
	Возврат Перехватчик;
	
КонецФункции

Функция ПерехватчикСинхронизацииСвойствДекораторов(ИмяМетода, ТипПерехватчика)
	
	ТекстМетода =
		"Если ТипЗнч(ЭтотОбъект) = ТипЗнч(ФИНТ_ВнешнийОбъект) Тогда
		|	ОбработкаДекоратора.СинхронизироватьПоля(ЭтотОбъект, Этот);
		|ИначеЕсли ТипЗнч(ЭтотОбъект) = ТипЗнч(Этот) Тогда
		|	ОбработкаДекоратора.СинхронизироватьПоля(ЭтотОбъект, ФИНТ_ВнешнийОбъект);
		|КонецЕсли;";
	
	Перехватчик = Новый Перехватчик(ИмяМетода)
		.ТипПерехватчика(ТипПерехватчика)
		.Тело(ТекстМетода);
	
	Возврат Перехватчик;
	
КонецФункции

Функция ПерехватчикСинхронизацииНаследуемыхСвойств(ИмяМетода, ТипПерехватчика)
	
	Перехватчик = Новый Перехватчик(ИмяМетода)
		.ТипПерехватчика(ТипПерехватчика)
		.Тело("	ФИНТ_Контейнер.СинхронизироватьПоляНаследуемых(ЭтотОбъект, ФИНТ_НаследуемыйКласс, ФИНТ_БазовыйКласс, ФИНТ_ОписаниеОбъекта);");
	
	Возврат Перехватчик;
	
КонецФункции

Процедура ПроверитьТипыПараметров(ПутьКОбъекту, ИмяМетода, ДанныеПараметров) Экспорт
	
	Для Каждого Переменная Из ДанныеПараметров Цикл
		
		Значение = Переменная.Значение.Значение;
		ОписаниеОбъекта = Переменная.Значение.ОписаниеОбъекта;
		
		Если Значение = NULL Тогда
			Возврат;
		КонецЕсли;
		
		ТипЗначение = ?(ОписаниеОбъекта <> Неопределено, ОписаниеОбъекта.ТипОбъекта(), ТипЗнч(Значение));
		ОжидаемыеТипы = Переменная.Значение.ДанныеТипов;
		ИменаОжидаемыхТипов = "";
		ЕстьСовпадениеТипа = Ложь;
		
		Для Каждого ДанныеОжидаемогоТипа Из ОжидаемыеТипы Цикл
			
			ИменаОжидаемыхТипов = ИменаОжидаемыхТипов + ?(ИменаОжидаемыхТипов = "", "", ", ") + Строка(ДанныеОжидаемогоТипа.ОсновнойТип);
			
			Если ДанныеОжидаемогоТипа.Типы.Найти(ТипЗначение) <> Неопределено И НЕ ЕстьСовпадениеТипа Тогда
				ЕстьСовпадениеТипа = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
		Если НЕ ЕстьСовпадениеТипа Тогда
			СклоненныйВариант = ?(ОжидаемыеТипы.Количество() > 1, "ожидались типы", "ожидался тип");
			ШаблонТекстаИсключения = "Несоответствие типов параметра ""%1"" метода ""%2"" объекта %5 %6 ""%3"" передан ""%4""";
			ВызватьИсключение СтрШаблон(ШаблонТекстаИсключения, Переменная.Ключ, ИмяМетода, ИменаОжидаемыхТипов, Строка(ТипЗначение), ПутьКОбъекту, СклоненныйВариант);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СинхронизироватьПоляНаследуемых(ТекущийОбъект, ФИНТ_НаследуемыйКласс, ФИНТ_БазовыйКласс, ФИНТ_ОписаниеОбъекта) Экспорт
	
	Если ФИНТ_НаследуемыйКласс <> Неопределено ИЛИ ФИНТ_БазовыйКласс <> Неопределено Тогда
		
		СинхронизируемыеПоля = Новый Массив();
		
		Если ФИНТ_НаследуемыйКласс <> Неопределено Тогда
			
			ИменаНаследуемыхСвойств = ФИНТ_ОписаниеОбъекта.ИменаПроизвольныхСвойств();
			
			Для Каждого Элемент Из ИменаНаследуемыхСвойств Цикл
				СинхронизируемыеПоля.Добавить(Элемент);
			КонецЦикла;
			
			ЛокальныйОбъектНаследуемого = Рефлексия.ПолучитьСвойство(ФИНТ_НаследуемыйКласс, "Этот");
			ИсходныйОбъектНаследуемого = Рефлексия.ПолучитьСвойство(ФИНТ_НаследуемыйКласс, "Декоратор_ИсходныйОбъект");
			
			СинхронизироватьПоля(ТекущийОбъект, ФИНТ_НаследуемыйКласс, СинхронизируемыеПоля, Ложь);
			СинхронизироватьПоля(ФИНТ_НаследуемыйКласс, ЛокальныйОбъектНаследуемого, СинхронизируемыеПоля, Ложь);
			
			ОписаниеИсходногоОбъекта = Рефлексия.ПолучитьСвойство(ЛокальныйОбъектНаследуемого, "ФИНТ_ОписаниеОбъекта");
			ИменаПроизвольныхСвойств = ОписаниеИсходногоОбъекта.ИменаПроизвольныхСвойств();
			СинхронизироватьПоля(ФИНТ_НаследуемыйКласс, ИсходныйОбъектНаследуемого, ИменаПроизвольныхСвойств, Ложь);
			
		КонецЕсли;
		
		Если ФИНТ_БазовыйКласс <> Неопределено Тогда
			
			ИменаНаследуемыхСвойств = ФИНТ_ОписаниеОбъекта.ИменаНаследуемыхСвойств();
			
			Для Каждого Элемент Из ИменаНаследуемыхСвойств Цикл
				СинхронизируемыеПоля.Добавить(Элемент);
			КонецЦикла;
			
			ЛокальныйОбъектНаследуемого = Рефлексия.ПолучитьСвойство(ФИНТ_БазовыйКласс, "Этот");
			ИсходныйОбъектНаследуемого = Рефлексия.ПолучитьСвойство(ФИНТ_БазовыйКласс, "Декоратор_ИсходныйОбъект");
			
			СинхронизироватьПоля(ТекущийОбъект, ФИНТ_БазовыйКласс, СинхронизируемыеПоля, Ложь);
			СинхронизироватьПоля(ФИНТ_БазовыйКласс, ЛокальныйОбъектНаследуемого, СинхронизируемыеПоля, Ложь);
			СинхронизироватьПоля(ФИНТ_БазовыйКласс, ИсходныйОбъектНаследуемого, СинхронизируемыеПоля, Ложь);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьТипВозвращающегоЗначения(ПутьКОбъекту, ИмяМетода, ДанныеТипов, ВозвращаемоеЗначение, ОписаниеОбъекта) Экспорт
	
	ТипЗначение = ?(ОписаниеОбъекта <> Неопределено, ОписаниеОбъекта.ТипОбъекта(), ТипЗнч(ВозвращаемоеЗначение));
	ОжидаемыеТипы = ДанныеТипов;
	ИменаОжидаемыхТипов = "";
	ЕстьСовпадениеТипа = Ложь;
	
	Для Каждого ДанныеОжидаемогоТипа Из ОжидаемыеТипы Цикл
		
		ИменаОжидаемыхТипов = ИменаОжидаемыхТипов + ?(ИменаОжидаемыхТипов = "", "", ", ") + Строка(ДанныеОжидаемогоТипа.ОсновнойТип);
		
		Если ДанныеОжидаемогоТипа.Типы.Найти(ТипЗначение) <> Неопределено И НЕ ЕстьСовпадениеТипа Тогда
			ЕстьСовпадениеТипа = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ЕстьСовпадениеТипа Тогда
		СклоненныйВариант = ?(ОжидаемыеТипы.Количество() > 1, "ожидались типы", "ожидался тип");
		ШаблонТекстаИсключения = "Функция %1.%2 возвращает значение не верного типа, %5 ""%3"" передан ""%4""";
		ВызватьИсключение СтрШаблон(ШаблонТекстаИсключения, ПутьКОбъекту, ИмяМетода, ИменаОжидаемыхТипов, Строка(ТипЗначение), СклоненныйВариант);
	КонецЕсли;
	
КонецПроцедуры

// Синхронизировать значения экспортных полей двух объектов.
//
// Параметры:
//   ИсходныйОбъект - Произвольный - Источник значений свойств
//   Потребитель - Произвольный - Получатель значений свойств
//   СписокПолей - Массив из Строка - Список имен игнорируемых свойств
//   Игнорировать - Булеов - Работает если передан список полей, если истина тогда игнорирует список, иначе синхронизирует поля в списке
//
Процедура СинхронизироватьПоля(ИсходныйОбъект, Потребитель, СписокПолей = Неопределено, Игнорировать = Истина) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ИсходныйОбъект)
		ИЛИ НЕ ЗначениеЗаполнено(Потребитель) Тогда
		Возврат;
	КонецЕсли;
	
	ИменаИгнорируемыхПолей = Новый Массив;
	ИменаИгнорируемыхПолей.Добавить("Декоратор_ИсходныйОбъект");
	ИменаИгнорируемыхПолей.Добавить("Декоратор_Лог");
	ИменаИгнорируемыхПолей.Добавить("ФИНТ_Контейнер");
	ИменаИгнорируемыхПолей.Добавить("ФИНТ_БазовыйКласс");
	ИменаИгнорируемыхПолей.Добавить("ФИНТ_НаследуемыйКласс");
	ИменаИгнорируемыхПолей.Добавить("ФИНТ_ОписаниеОбъекта");
	ИменаИгнорируемыхПолей.Добавить("ФИНТ_ВнешнийОбъект");
	ИменаИгнорируемыхПолей.Добавить("Этот");
	ИменаИгнорируемыхПолей.Добавить("Базовый");
	
	ИменаПолейКСинхронизации = Новый Массив;
	
	Если ТипЗнч(СписокПолей) = Тип("Массив") Тогда
		Для Каждого Элемент Из СписокПолей Цикл
			Если Игнорировать Тогда
				ИменаИгнорируемыхПолей.Добавить(Элемент);
			Иначе
				ИменаПолейКСинхронизации.Добавить(Элемент);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	СвойстваИсходногоОбъекта = Рефлексия.ПолучитьТаблицуСвойств(ИсходныйОбъект);
	СвойстваПотребителя = Рефлексия.ПолучитьТаблицуСвойств(Потребитель);
	
	Для Каждого Свойство Из СвойстваИсходногоОбъекта Цикл
		
		ИмяСвойства = Свойство.Имя;
		
		Если НЕ ИменаПолейКСинхронизации.Количество() Тогда
			
			Если ИменаИгнорируемыхПолей.Найти(ИмяСвойства) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если СвойстваПотребителя.Найти(ИмяСвойства, "Имя") = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
		Иначе
			Если ИменаПолейКСинхронизации.Найти(ИмяСвойства) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		ЗначениеСвойства = Рефлексия.ПолучитьСвойство(ИсходныйОбъект, ИмяСвойства);
		Рефлексия.УстановитьСвойство(Потребитель, ИмяСвойства, ЗначениеСвойства);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаменитьКонфликтующиеСимволы(Текст)
	
	Текст = СтрЗаменить(Текст, Символ(1048) + Символ(774), Символ(1049)); // Й
	Текст = СтрЗаменить(Текст, Символ(1080) + Символ(774), Символ(1081)); // и
	Текст = СтрЗаменить(Текст, Символ(1045) + Символ(776), Символ(1025)); // Ё
	Текст = СтрЗаменить(Текст, Символ(1077) + Символ(776), Символ(1105)); // ё
	
КонецПроцедуры

Функция АннотацияТипаИзАннотаций(Аннотации)
	
	АннотацияТипа = Неопределено;
	
	Для Каждого Элемент Из Аннотации Цикл
		АннотацияТипа = Элемент;
	КонецЦикла;
	
	Возврат АннотацияТипа;
	
КонецФункции

Функция ТипСуществуетИлиИмпортирован(Объект, ИмяСвойстваТипа)
	
	ПроверитьНаличиеВСистемеТипов = Ложь;
	ТипСвойстваСуществует = Истина;
	
	Если Рефлексия.СвойствоСуществует(Объект, ИмяСвойстваТипа) Тогда
		
		Попытка
			
			ЗначениеСвойстваТипа = Рефлексия.ПолучитьСвойство(Объект, ИмяСвойстваТипа);
			
			Если ТипЗнч(ЗначениеСвойстваТипа) <> Тип("ОписаниеОбъекта") Тогда
				ПроверитьНаличиеВСистемеТипов = Истина;
			КонецЕсли;
			
		Исключение
			ПроверитьНаличиеВСистемеТипов = Истина;
		КонецПопытки;
		
	Иначе
		ПроверитьНаличиеВСистемеТипов = Истина;
	КонецЕсли;
	
	Если ПроверитьНаличиеВСистемеТипов Тогда
		ТипСвойстваСуществует = Рефлексия.ТипСуществуетВКонтексте(ИмяСвойстваТипа);
	КонецЕсли;
	
	Возврат ТипСвойстваСуществует;
	
КонецФункции

Процедура СгенерироватьМетодыСвойства(Свойство, АннотацииСвойства, АннотацияТипа, Объект, Декоратор, ЛокальныйДекоратор)
	
	НовыйМетод = Новый Метод(Свойство.Имя).Публичный();
	
	НовыйПараметрМетода = Новый ПараметрМетода("Значение");
	НовыйПараметрМетода.ЗначениеПоУмолчанию(NULL);
	
	НоваяАннотация = Новый Аннотация(АннотацияТипа.Ключ);
	
	ТекстЧтениеИзменение = СтрШаблон("Если Значение <> NULL Тогда
			|	%1 = Значение;
			|КонецЕсли;
			|
			|Возврат %1;", Свойство.Имя);
	
	Если АннотацииСвойства.Свойство("Чтение") Тогда
		
		НовыйПараметрМетода.Аннотация(Новый Аннотация("Любой"));
		НовыйМетод.Аннотация(НоваяАннотация);
		
		ТекстШаблона = СтрШаблон("Если Значение <> NULL Тогда
				|	ВызватьИсключение ""Свойство доступно только для чтения"";
				|КонецЕсли;
				|
				|Возврат %1;", Свойство.Имя);
		
	ИначеЕсли АннотацииСвойства.Свойство("ЧтениеИзменение") Тогда
		
		НовыйПараметрМетода.Аннотация(НоваяАннотация);
		НовыйМетод.Аннотация(НоваяАннотация);
		
		ТекстШаблона = ТекстЧтениеИзменение;
		
	Иначе
		ТекстШаблона = "ВызватьИсключение ""Свойство недоступно"";";
	КонецЕсли;
	
	НовыйМетод.Параметр(НовыйПараметрМетода);
	НовыйМетод.ТелоМетода(ТекстШаблона);
	Декоратор.Метод(НовыйМетод);
	
	НовыйМетод = Новый Метод(Свойство.Имя).Публичный();
	
	НовыйПараметрМетода = Новый ПараметрМетода("Значение");
	НовыйПараметрМетода.ЗначениеПоУмолчанию(NULL);
	НовыйПараметрМетода.Аннотация(НоваяАннотация);
	
	НовыйМетод.Параметр(НовыйПараметрМетода);
	НовыйМетод.Аннотация(НоваяАннотация);
	НовыйМетод.ТелоМетода(ТекстЧтениеИзменение);
	
	ЛокальныйДекоратор.Метод(НовыйМетод);
	
	НоваяТаблицаАннотаций = Свойство.Аннотации.СкопироватьКолонки();
	СтрокаТаблицыАннотации = НоваяТаблицаАннотаций.Добавить();
	СтрокаТаблицыАннотации.Имя = АннотацияТипа.Ключ;
	СтрокаТаблицыАннотации.Параметры = Новый Массив();
	
	СтруктураПараметров = Новый Структура();
	СвойстваПараметра = Новый Структура("Имя,
			|ПоЗначению,
			|ЕстьЗначениеПоУмолчанию,
			|ЗначениеПоУмолчанию,
			|Аннотации",
			"Значение",
			Ложь,
			Истина,
			NULL,
			Рефлексия.ТаблицаАннотацийВСтруктуру(НоваяТаблицаАннотаций),
			NULL);
	
	СтруктураПараметров.Вставить("Значение", СвойстваПараметра);
	
	ДанныеМетода = Новый Структура("Имя, ЭтоФункция, Аннотации, СтруктураПараметров", Свойство.Имя, Истина, НоваяТаблицаАннотаций, СтруктураПараметров);
	
	СтрокаДанных = ДанныеМетодовДляПерехватчиков.Добавить();
	СтрокаДанных.Метод = ДанныеМетода;
	СтрокаДанных.Объект = Объект;
	СтрокаДанных.Декоратор = Декоратор;
	СтрокаДанных.ЛокальныйДекоратор = ЛокальныйДекоратор;
	СтрокаДанных.Генерируемый = Истина;
	
	// ДобавитьПерехватчикиКОбъекту(Объект, Декоратор, ЛокальныйДекоратор, ДанныеМетода, Истина);
	
КонецПроцедуры

Функция СравнитьТаблицы(ОригинальнаяТаблица, ПроверяемаяТаблица)
	
	Если ТипЗнч(ОригинальнаяТаблица) <> Тип("ТаблицаЗначений")
		ИЛИ ТипЗнч(ПроверяемаяТаблица) <> Тип("ТаблицаЗначений") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Проверка колонок
	Если ОригинальнаяТаблица.Колонки.Количество() <> ПроверяемаяТаблица.Колонки.Количество() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого КолонкаОригинал Из ОригинальнаяТаблица.Колонки Цикл
		ИмяКолонки = КолонкаОригинал.Имя;
		Если ПроверяемаяТаблица.Колонки.Найти(ИмяКолонки) = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	// Проверка строк
	Если ОригинальнаяТаблица.Количество() <> ПроверяемаяТаблица.Количество() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого СтрокаОригинал Из ОригинальнаяТаблица Цикл
		ИндексСтроки = ОригинальнаяТаблица.Индекс(СтрокаОригинал);
		СтрокаПроверка = ПроверяемаяТаблица[ИндексСтроки];
		
		Для Каждого Колонка Из ОригинальнаяТаблица.Колонки Цикл
			ИмяКолонки = Колонка.Имя;
			ЗначениеОригинал = СтрокаОригинал[ИмяКолонки];
			ЗначениеПроверка = СтрокаПроверка[ИмяКолонки];
			
			Если ТипЗнч(ЗначениеОригинал) = Тип("ТаблицаЗначений") Тогда
				// Рекурсивная проверка вложенной таблицы
				Если НЕ СравнитьТаблицы(ЗначениеОригинал, ЗначениеПроверка) Тогда
					Возврат Ложь;
				КонецЕсли;
			Иначе
				// Прямое сравнение значений
				Если ЗначениеОригинал <> ЗначениеПроверка Тогда
					Возврат Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

ДанныеГенерируемыхФункцийСвойств = Новый ТаблицаЗначений();
ДанныеГенерируемыхФункцийСвойств.Колонки.Добавить("Свойство");
ДанныеГенерируемыхФункцийСвойств.Колонки.Добавить("АннотацииСвойства");
ДанныеГенерируемыхФункцийСвойств.Колонки.Добавить("АннотацияТипа");
ДанныеГенерируемыхФункцийСвойств.Колонки.Добавить("Объект");
ДанныеГенерируемыхФункцийСвойств.Колонки.Добавить("Декоратор");
ДанныеГенерируемыхФункцийСвойств.Колонки.Добавить("ЛокальныйДекоратор");

ДанныеПодготовленныхДекораторов = Новый ТаблицаЗначений();
ДанныеПодготовленныхДекораторов.Колонки.Добавить("Объект");
ДанныеПодготовленныхДекораторов.Колонки.Добавить("ОписаниеОбъекта");
ДанныеПодготовленныхДекораторов.Колонки.Добавить("ИмяТипаЛокальногоДекоратора");
ДанныеПодготовленныхДекораторов.Колонки.Добавить("ИмяТипаЭкспортногоДекоратора");
ДанныеПодготовленныхДекораторов.Колонки.Добавить("Декоратор");
ДанныеПодготовленныхДекораторов.Колонки.Добавить("ЛокальныйДекоратор");

ДанныеМетодовДляПерехватчиков = Новый ТаблицаЗначений();
ДанныеМетодовДляПерехватчиков.Колонки.Добавить("Объект");
ДанныеМетодовДляПерехватчиков.Колонки.Добавить("Метод");
ДанныеМетодовДляПерехватчиков.Колонки.Добавить("Декоратор");
ДанныеМетодовДляПерехватчиков.Колонки.Добавить("ЛокальныйДекоратор");
ДанныеМетодовДляПерехватчиков.Колонки.Добавить("Генерируемый");