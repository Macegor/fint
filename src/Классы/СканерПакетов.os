
Перем СканируемыйКаталог;
Перем ПутьКСтартовомуСценарию;

Процедура ПриСозданииОбъекта(Каталог)

	СканируемыйКаталог = Каталог;
	ПутьКСтартовомуСценарию = СтартовыйСценарий().Источник;

КонецПроцедуры

Функция Просканировать() Экспорт
	
 	// Результат сканирования - соответствие имени пакета и его описания
 	РезультатСканирования = Новый Массив();
 	КорневойПакет = ЭлементСоставаПакета();
	КорневойПакет.Имя = "Корень";
 	РезультатСканирования.Добавить(КорневойПакет);
 	
 	// Сначала сканируем корневой каталог
 	КорневыеФайлы = НайтиФайлы(СканируемыйКаталог, "*.os", Ложь);

 	Для Каждого ФайлСкрипта Из КорневыеФайлы Цикл

		Если ФайлСкрипта.Имя = "package-loader.os" Тогда
			Продолжить;
		КонецЕсли;

 		ДобавитьОписаниеСкрипта(ФайлСкрипта, КорневойПакет);

 	КонецЦикла;
 	
	ПутьККаталогуЛокальныхМодулей = ПолучитьЗначениеСистемнойНастройки("lib.additional");

 	// Теперь сканируем подкаталоги
 	ПодКаталоги = НайтиФайлы(СканируемыйКаталог, "", Ложь);
	ПутьКПапкеРесурсы = ОбъединитьПути(СканируемыйКаталог, "src");
	КаталогРесурсы = НайтиФайлы(ПутьКПапкеРесурсы);
	КаталогРесурсы = ?(НЕ КаталогРесурсы.Количество(), Новый Файл(ПутьКПапкеРесурсы), КаталогРесурсы[0]);

	Если КаталогРесурсы.Существует() Тогда

		КорневыеФайлы = НайтиФайлы(КаталогРесурсы.ПолноеИмя, "*.os", Ложь);

		Для Каждого ФайлСкрипта Из КорневыеФайлы Цикл
			ДобавитьОписаниеСкрипта(ФайлСкрипта, КорневойПакет);
		КонецЦикла;

		ПодКаталоги = НайтиФайлы(КаталогРесурсы.ПолноеИмя, "", Ложь);

	КонецЕсли;

 	Для Каждого Каталог Из ПодКаталоги Цикл

 		Если Каталог.ЭтоКаталог() И Каталог.ПолноеИмя <> ПутьККаталогуЛокальныхМодулей Тогда
 			ОбработатьПодкаталог(Каталог, РезультатСканирования);
 		КонецЕсли;

 	КонецЦикла;
 	
 	Возврат РезультатСканирования;

КонецФункции

Процедура ОбработатьПодкаталог(Каталог, РезультатСканирования)
	
	// Создаем соответствие для текущего каталога
	ВложенныйПакет = ЭлементСоставаПакета();
	
	// Получаем список файлов в каталоге
	ФайлыКаталога = НайтиФайлы(Каталог.ПолноеИмя, "*.os", Ложь);
	Для Каждого ФайлСкрипта Из ФайлыКаталога Цикл
		ДобавитьОписаниеСкрипта(ФайлСкрипта, ВложенныйПакет);
	КонецЦикла;
	
	// Рекурсивно обрабатываем подкаталоги
	ПодКаталоги = НайтиФайлы(Каталог.ПолноеИмя, "", Ложь);
	Для Каждого ПодКаталог Из ПодКаталоги Цикл
		Если ПодКаталог.ЭтоКаталог() Тогда
			ОбработатьПодкаталог(ПодКаталог, ВложенныйПакет.Подпакеты);
		КонецЕсли;
	КонецЦикла;
	
	// Добавляем результаты сканирования каталога
	Если ВложенныйПакет.Количество() > 0 Тогда
		ВложенныйПакет.Имя = Каталог.Имя;
		РезультатСканирования.Добавить(ВложенныйПакет);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьОписаниеСкрипта(ФайлСкрипта, ЭлементСоставаПакета)
	
	Если ПутьКСтартовомуСценарию = ФайлСкрипта.ПолноеИмя Тогда
		Возврат;
	КонецЕсли;

	Если ФайлСкрипта.ИмяБезРасширения = "Описание" Тогда
		Возврат;
	КонецЕсли;

	ОписаниеСкрипта = Новый Структура;
	ОписаниеСкрипта.Вставить("Имя", ФайлСкрипта.ИмяБезРасширения);
	ОписаниеСкрипта.Вставить("ПолныйПуть", ФайлСкрипта.ПолноеИмя);
	ОписаниеСкрипта.Вставить("Путь", ?(Прав(ФайлСкрипта.Путь, 1) = "\" ИЛИ Прав(ФайлСкрипта.Путь, 1) = "/", 
		Лев(ФайлСкрипта.Путь, СтрДлина(ФайлСкрипта.Путь) - 1), ФайлСкрипта.Путь));
	ОписаниеСкрипта.Вставить("Расширение", ФайлСкрипта.Расширение);
	ОписаниеСкрипта.Вставить("Методы", ПолучитьМетодыИзСкрипта(ФайлСкрипта.ПолноеИмя));
	
	ЭлементСоставаПакета.Скрипты.Добавить(ОписаниеСкрипта);
	
КонецПроцедуры

Функция ПолучитьМетодыИзСкрипта(ПутьКФайлу)

	ТекстСкрипта = Новый ЧтениеТекста(ПутьКФайлу);
	Текст = ТекстСкрипта.Прочитать();
	ТекстСкрипта.Закрыть();
	
	Результат = Новый Соответствие();
	
	// Разбиваем текст на строки для анализа
	Строки = СтрРазделить(Текст, Символы.ПС);
	Индекс = 0;
	
	Пока Индекс < Строки.Количество() Цикл
		Строка = Строки[Индекс];

		// Пропускаем пустые строки и комментарии
		Пока СтрДлина(СокрЛП(Строка)) = 0 Или Лев(СокрЛП(Строка),2) = "//" Цикл
			Индекс = Индекс + 1;
			Если Индекс >= Строки.Количество() Тогда
				Прервать;
			КонецЕсли;
			Строка = Строки[Индекс];
		КонецЦикла;

		// Проверяем, есть ли в строке объявление метода с аннотациями или без
		// Шаблон: ^((?:&[^\s]+[ \t]*)*)(Функция|Процедура)\s+Имя(...
		ШаблонОбъявления = "^(?:&[^\s]+[ \t]*)*(Функция|Процедура)\s+([а-яА-ЯёЁ\w]+)\s*\(([^\)]*)\)";
		РегОбъявления = Новый РегулярноеВыражение(ШаблонОбъявления);
		СовпадениеОбъявления = РегОбъявления.НайтиСовпадения(Строка);

		Если СовпадениеОбъявления <> Неопределено И СовпадениеОбъявления.Количество() > 0 Тогда

			// Проверяем, экспортный ли метод
			Экспортный = Ложь;
			Если СтрЗаканчиваетсяНа(Строка, "Экспорт") Тогда
				Экспортный = Истина;
			КонецЕсли;

			// Извлекаем имя метода и параметры
			ИмяМетода = СовпадениеОбъявления[0].Группы[2].Значение;

			// Собираем текст метода
			ТекстМетода = Строка + Символы.ПС;
			Индекс = Индекс + 1;
			Глубина = 1;

			Пока Индекс < Строки.Количество() И Глубина > 0 Цикл
				Строка = Строки[Индекс];
				ТекстМетода = ТекстМетода + Строка + Символы.ПС;

				// Вложенные методы (маловероятно, но для совместимости)
				Если РегОбъявления.НайтиСовпадения(Строка) <> Неопределено И РегОбъявления.НайтиСовпадения(Строка).Количество() > 0 Тогда
					Глубина = Глубина + 1;
				ИначеЕсли СтрНачинаетсяС(Строка, "КонецФункции") Или СтрНачинаетсяС(Строка, "КонецПроцедуры") Тогда
					Глубина = Глубина - 1;
				КонецЕсли;

				Индекс = Индекс + 1;
			КонецЦикла;

			// Извлекаем тело метода, исключая объявление и окончание
			ШаблонТела = "(?:Функция|Процедура)\s+[^\n]*\n([\s\S]*?)(?:КонецФункции|КонецПроцедуры)";
			РегуляркаТела = Новый РегулярноеВыражение(ШаблонТела);
			СовпаденияТела = РегуляркаТела.НайтиСовпадения(ТекстМетода);

			Если СовпаденияТела.Количество() > 0 Тогда
				ТекстМетода = СовпаденияТела[0].Группы[1].Значение;
			КонецЕсли;

			// Определяем тип метода
			ЭтоПроцедура = (СовпадениеОбъявления[0].Группы[1].Значение = "Процедура");

			// Добавляем метод в результат
			Метод = Новый Структура("Экспортный, Текст, ЭтоПроцедура",
				Экспортный, Символы.ВТаб + СокрЛП(ТекстМетода), ЭтоПроцедура);
			Результат.Вставить(СокрЛП(ИмяМетода), Метод);

		Иначе
			Индекс = Индекс + 1;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ЭлементСоставаПакета()
	
	Возврат Новый Структура("Имя, Подпакеты, Скрипты", "", Новый Массив(), Новый Массив());

КонецФункции